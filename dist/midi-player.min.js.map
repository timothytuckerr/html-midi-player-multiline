{"version":3,"file":"midi-player.min.js","sources":["../src/assets/index.ts","../src/utils.ts","../src/visualizer.ts","../src/player.ts","../src/index.ts"],"sourcesContent":["/// <reference path=\"imports.d.ts\"/>\nimport playIcon from './play.svg';\nimport pauseIcon from './pause.svg';\nimport errorIcon from './error.svg';\nimport controlsCSS from './controls.scss';\nimport visualizerCSS from './visualizer.scss';\n\nexport const controlsTemplate = document.createElement('template');\ncontrolsTemplate.innerHTML = `\n<style>\n${controlsCSS}\n</style>\n<div class=\"controls stopped frozen\" part=\"control-panel\">\n  <button class=\"play\" part=\"play-button\" disabled>\n    <span class=\"icon play-icon\">${playIcon}</span>\n    <span class=\"icon stop-icon\">${pauseIcon}</span>\n    <span class=\"icon error-icon\">${errorIcon}</span>\n  </button>\n  <div part=\"time\"><span class=\"current-time\" part=\"current-time\">0:00</span> / <span class=\"total-time\" part=\"total-time\">0:00</span></div>\n  <input type=\"range\" min=\"0\" max=\"0\" value=\"0\" step=\"any\" class=\"seek-bar\" part=\"seek-bar\" disabled>\n  <div class=\"overlay loading-overlay\" part=\"loading-overlay\"></div>\n</div>\n`;\n\nexport const visualizerTemplate = document.createElement('template');\nvisualizerTemplate.innerHTML = `\n<style>\n${visualizerCSS}\n</style>\n<slot>\n</slot>\n`;\n","export function formatTime(seconds: number) {\n  const negative = (seconds < 0);\n  seconds = Math.floor(Math.abs(seconds || 0));\n  const s = seconds % 60;\n  const m = (seconds - s) / 60;\n  const h = (seconds - s - 60 * m) / 3600;\n  const sStr = (s > 9) ? `${s}` : `0${s}`;\n  const mStr = (m > 9 || !h) ? `${m}:` : `0${m}:`;\n  const hStr = h ? `${h}:` : '';\n  return (negative ? '-' : '') + hStr + mStr + sStr;\n}\n","import * as mm from '@magenta/music/esm/core.js';\nimport {NoteSequence, INoteSequence} from '@magenta/music/esm/protobuf.js';\n\nimport {visualizerTemplate} from './assets';\n\nconst VISUALIZER_TYPES = ['piano-roll', 'waterfall', 'staff'] as const;\ntype VisualizerType = typeof VISUALIZER_TYPES[number];\ntype Visualizer = mm.PianoRollSVGVisualizer | mm.WaterfallSVGVisualizer | mm.StaffSVGVisualizer;\n\n\n/**\n * MIDI visualizer element.\n *\n * The visualizer is implemented via SVG elements which support styling as described\n * [here](https://magenta.github.io/magenta-js/music/demos/visualizer.html).\n *\n * See also the\n * [`@magenta/music/core/visualizer` docs](https://magenta.github.io/magenta-js/music/modules/_core_visualizer_.html).\n *\n * @prop src - MIDI file URL\n * @prop type - Visualizer type\n * @prop lines - Number of lines in the visualizer (Only for `staff` type)\n * @prop noteSequence - Magenta note sequence object representing the currently displayed content\n * @prop config - Magenta visualizer config object\n */\nexport class VisualizerElement extends HTMLElement {\n  private domInitialized = false;\n  private initTimeout: number;\n\n  protected wrapper: HTMLDivElement;\n  protected visualizers: Visualizer[];\n  protected lastChunkIndex: number = 0;\n\n  protected ns: INoteSequence = null;\n  protected _config: mm.VisualizerConfig = {};\n\n  static get observedAttributes() { return ['src', 'type']; }\n\n  connectedCallback() {\n    this.attachShadow({mode: 'open'});\n    this.shadowRoot.appendChild(visualizerTemplate.content.cloneNode(true));\n\n    if (this.domInitialized) {\n      return;\n    }\n    this.domInitialized = true;\n\n    this.wrapper = document.createElement('div');\n    this.appendChild(this.wrapper);\n\n    this.initVisualizerNow();\n  }\n\n  attributeChangedCallback(name: string, _oldValue: string, _newValue: string) {\n    if (name === 'src' || name === 'type') {\n      this.initVisualizer();\n    }\n  }\n\n  protected initVisualizer() {\n    if (this.initTimeout == null) {\n      this.initTimeout = window.setTimeout(() => this.initVisualizerNow());\n    }\n  }\n\n  protected async initVisualizerNow() {\n    this.initTimeout = null;\n    if (!this.domInitialized) {\n      return;\n    }\n    if (this.src) {\n      this.ns = null;\n      this.ns = await mm.urlToNoteSequence(this.src);\n    }\n\n    this.wrapper.innerHTML = '';\n\n    if (!this.ns) {\n      return;\n    }\n\n    if (this.type === 'piano-roll') {\n      this.wrapper.classList.add('piano-roll-visualizer');\n      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      this.wrapper.appendChild(svg);\n      this.visualizers = [new mm.PianoRollSVGVisualizer(this.ns, svg, this._config)];\n    } else if (this.type === 'waterfall') {\n      this.wrapper.classList.add('waterfall-visualizer');\n      this.visualizers = [new mm.WaterfallSVGVisualizer(this.ns, this.wrapper, this._config)];\n    } else if (this.type === 'staff') {\n      this.wrapper.classList.add('staff-visualizer');\n      this.visualizers = [];\n      const chunkSize = Math.ceil(this.ns.notes.length / this.lines);\n      for (let i = 0; i < this.ns.notes.length; i += chunkSize) {\n        const chunk = structuredClone(this.ns.notes.slice(i, i + chunkSize));\n        let startTime = chunk[0].startTime;\n        chunk.forEach(n => {n.startTime -= startTime;n.endTime -= startTime;});\n        const div = document.createElement('div');\n        this.wrapper.appendChild(div);\n        const new_ns = structuredClone(this.ns);\n        new_ns.notes = chunk;\n        this.visualizers.push(new mm.StaffSVGVisualizer(new_ns, div, this._config));\n      }\n    }\n  }\n\n  reload() {\n    this.initVisualizerNow();\n  }\n\n  redraw(activeNote?: NoteSequence.INote) {\n    if (this.visualizers) {\n      if (this.type == \"staff\") {\n        let chunkIndex = Math.floor(this.ns.notes.indexOf(activeNote) / Math.ceil(this.ns.notes.length / this.lines));\n        if (chunkIndex != this.lastChunkIndex) {\n          this.visualizers[this.lastChunkIndex].redraw(activeNote, false); // clearActiveNotes() doesn't work\n          this.lastChunkIndex = chunkIndex;\n        }\n        const note = structuredClone(activeNote);\n        note.startTime -= this.ns.notes[chunkIndex * Math.ceil(this.ns.notes.length / this.lines)].startTime;\n        this.visualizers[chunkIndex].redraw(note, activeNote != null);\n      }\n      else {\n        this.visualizers.forEach(visualizer => visualizer.redraw(activeNote, activeNote != null));\n      }\n    }\n  }\n\n  clearActiveNotes() {\n    if (this.visualizers) {\n      this.visualizers.forEach(visualizer => visualizer.clearActiveNotes());\n    }\n  }\n\n  get noteSequence() {\n    return this.ns;\n  }\n\n  set noteSequence(value: INoteSequence | null) {\n    if (this.ns == value) {\n      return;\n    }\n    this.ns = value;\n    this.removeAttribute('src');  // Triggers initVisualizer only if src was present.\n    this.initVisualizer();\n  }\n\n  get src() {\n    return this.getAttribute('src');\n  }\n\n  set src(value: string | null) {\n    this.ns = null;\n    this.setOrRemoveAttribute('src', value);  // Triggers initVisualizer only if src was present.\n    this.initVisualizer();\n  }\n\n  get type() {\n    let value = this.getAttribute('type');\n    if ((VISUALIZER_TYPES as readonly string[]).indexOf(value) < 0) {\n      value = 'piano-roll';\n    }\n    return value as VisualizerType;\n  }\n\n  set type(value: VisualizerType) {\n    if (value != null && VISUALIZER_TYPES.indexOf(value) < 0) {\n      throw new Error(\n        `Unknown visualizer type ${value}. Allowed values: ${VISUALIZER_TYPES.join(', ')}`);\n    }\n    this.setOrRemoveAttribute('type', value);\n  }\n\n  get lines() {\n    let lines = Number(this.getAttribute('lines'))\n    return lines == 0 ? 1 : lines;\n  }\n\n  set lines(value: number) {\n    this.setOrRemoveAttribute('lines', value.toString() == '0' ? null : value.toString());\n  }\n\n  get config() {\n    return this._config;\n  }\n\n  set config(value: mm.VisualizerConfig) {\n    this._config = value;\n    this.initVisualizer();\n  }\n\n  protected setOrRemoveAttribute(name: string, value: string) {\n    if (value == null) {\n      this.removeAttribute(name);\n    } else {\n      this.setAttribute(name, value);\n    }\n  }\n}\n","import * as mm from '@magenta/music/esm/core.js';\nimport {NoteSequence, INoteSequence} from '@magenta/music/esm/protobuf.js';\n\nimport {controlsTemplate} from './assets';\nimport * as utils from './utils';\nimport {VisualizerElement} from './visualizer';\n\n\nexport type NoteEvent = CustomEvent<{note: NoteSequence.INote}>;\nconst VISUALIZER_EVENTS = ['start', 'stop', 'note'] as const;\nconst DEFAULT_SOUNDFONT = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\n\nlet playingPlayer: PlayerElement = null;\n\n\n/**\n * MIDI player element.\n * See also the [`@magenta/music/core/player` docs](https://magenta.github.io/magenta-js/music/modules/_core_player_.html).\n *\n * The element supports styling using the CSS [`::part` syntax](https://developer.mozilla.org/docs/Web/CSS/::part)\n * (see the list of shadow parts [below](#css-shadow-parts)). For example:\n * ```css\n * midi-player::part(control-panel) {\n *     background: aquamarine;\n *     border-radius: 0px;\n * }\n * ```\n *\n * @prop src - MIDI file URL\n * @prop soundFont - Magenta SoundFont URL, an empty string to use the default SoundFont, or `null` to use a simple oscillator synth\n * @prop noteSequence - Magenta note sequence object representing the currently loaded content\n * @prop loop - Indicates whether the player should loop\n * @prop currentTime - Current playback position in seconds\n * @prop duration - Content duration in seconds\n * @prop playing - Indicates whether the player is currently playing\n * @attr visualizer - A selector matching `midi-visualizer` elements to bind to this player\n *\n * @fires load - The content is loaded and ready to play\n * @fires start - The player has started playing\n * @fires stop - The player has stopped playing\n * @fires loop - The player has automatically restarted playback after reaching the end\n * @fires note - A note starts\n *\n * @csspart control-panel - `<div>` containing all the controls\n * @csspart play-button - Play button\n * @csspart time - Numeric time indicator\n * @csspart current-time - Elapsed time\n * @csspart total-time - Total duration\n * @csspart seek-bar - `<input type=\"range\">` showing playback position\n * @csspart loading-overlay - Overlay with shimmer animation\n */\nexport class PlayerElement extends HTMLElement {\n  private domInitialized = false;\n  private initTimeout: number;\n  private needInitNs = false;\n\n  protected player: mm.BasePlayer;\n  protected controlPanel: HTMLElement;\n  protected playButton: HTMLButtonElement;\n  protected seekBar: HTMLInputElement;\n  protected currentTimeLabel: HTMLInputElement;\n  protected totalTimeLabel: HTMLInputElement;\n  protected visualizerListeners = new Map<VisualizerElement, {[name: string]: EventListener}>();\n\n  protected ns: INoteSequence = null;\n  protected _playing = false;\n  protected seeking = false;\n\n  static get observedAttributes() { return ['sound-font', 'src', 'visualizer']; }\n\n  constructor() {\n    super();\n\n    this.attachShadow({mode: 'open'});\n    this.shadowRoot.appendChild(controlsTemplate.content.cloneNode(true));\n\n    this.controlPanel = this.shadowRoot.querySelector('.controls');\n    this.playButton = this.controlPanel.querySelector('.play');\n    this.currentTimeLabel = this.controlPanel.querySelector('.current-time');\n    this.totalTimeLabel = this.controlPanel.querySelector('.total-time');\n    this.seekBar = this.controlPanel.querySelector('.seek-bar');\n  }\n\n  connectedCallback() {\n    if (this.domInitialized) {\n      return;\n    }\n    this.domInitialized = true;\n\n    const applyFocusVisiblePolyfill =\n      (window as any).applyFocusVisiblePolyfill as (scope: Document | ShadowRoot) => void;\n    if (applyFocusVisiblePolyfill != null) {\n      applyFocusVisiblePolyfill(this.shadowRoot);\n    }\n\n    this.playButton.addEventListener('click', () => {\n      if (this.player.isPlaying()) {\n        this.stop();\n      } else {\n        this.start();\n      }\n    });\n    this.seekBar.addEventListener('input', () => {\n      // Pause playback while the user is manipulating the control\n      this.seeking = true;\n      if (this.player && this.player.getPlayState() === 'started') {\n        this.player.pause();\n      }\n    });\n    this.seekBar.addEventListener('change', () => {\n      const time = this.currentTime;  // This returns the seek bar value as a number\n      this.currentTimeLabel.textContent = utils.formatTime(time);\n      if (this.player) {\n        if (this.player.isPlaying()) {\n          this.player.seekTo(time);\n          if (this.player.getPlayState() === 'paused') {\n            this.player.resume();\n          }\n        }\n      }\n      this.seeking = false;\n    });\n\n    this.initPlayerNow();\n  }\n\n  attributeChangedCallback(name: string, _oldValue: string, newValue: string) {\n    if (!this.hasAttribute(name)) {\n      newValue = null;\n    }\n\n    if (name === 'sound-font' || name === 'src') {\n      this.initPlayer();\n    } else if (name === 'visualizer') {\n      const fn = () => { this.setVisualizerSelector(newValue); };\n      if (document.readyState === 'loading') {\n        window.addEventListener('DOMContentLoaded', fn);\n      } else {\n        fn();\n      }\n    }\n  }\n\n  protected initPlayer(initNs = true) {\n    this.needInitNs = this.needInitNs || initNs;\n    if (this.initTimeout == null) {\n      this.stop();\n      this.setLoading();\n      this.initTimeout = window.setTimeout(() => this.initPlayerNow(this.needInitNs));\n    }\n  }\n\n  protected async initPlayerNow(initNs = true) {\n    this.initTimeout = null;\n    this.needInitNs = false;\n    if (!this.domInitialized) {\n      return;\n    }\n\n    try {\n      let ns: INoteSequence = null;\n      if (initNs) {\n        if (this.src) {\n          this.ns = null;\n          this.ns = await mm.urlToNoteSequence(this.src);\n        }\n        this.currentTime = 0;\n        if (!this.ns) {\n          this.setError('No content loaded');\n        }\n      }\n      ns = this.ns;\n\n      if (ns) {\n        this.seekBar.max = String(ns.totalTime);\n        this.totalTimeLabel.textContent = utils.formatTime(ns.totalTime);\n      } else {\n        this.seekBar.max = '0';\n        this.totalTimeLabel.textContent = utils.formatTime(0);\n        return;\n      }\n\n      let soundFont = this.soundFont;\n      const callbackObject = {\n        // Call callbacks only if we are still playing the same note sequence.\n        run: (n: NoteSequence.INote) => (this.ns === ns) && this.noteCallback(n),\n        stop: () => {}\n      };\n      if (soundFont === null) {\n        this.player = new mm.Player(false, callbackObject);\n      } else {\n        if (soundFont === \"\") {\n          soundFont = DEFAULT_SOUNDFONT;\n        }\n        this.player = new mm.SoundFontPlayer(soundFont, undefined, undefined, undefined,\n                                            callbackObject);\n        await (this.player as mm.SoundFontPlayer).loadSamples(ns);\n      }\n\n      if (this.ns !== ns) {\n        // If we started loading a different sequence in the meantime...\n        return;\n      }\n\n      this.setLoaded();\n      this.dispatchEvent(new CustomEvent('load'));\n    } catch (error) {\n      this.setError(String(error));\n      throw error;\n    }\n  }\n\n  reload() {\n    this.initPlayerNow();\n  }\n\n  start() {\n    this._start();\n  }\n\n  protected _start(looped = false) {\n    (async () => {\n      if (this.player) {\n        if (this.player.getPlayState() == 'stopped') {\n          if (playingPlayer && playingPlayer.playing && !(playingPlayer == this && looped)) {\n            playingPlayer.stop();\n          }\n          playingPlayer = this;\n          this._playing = true;\n\n          let offset = this.currentTime;\n          // Jump to the start if there are no notes left to play.\n          if (this.ns.notes.filter((note) => note.startTime > offset).length == 0) {\n            offset = 0;\n          }\n          this.currentTime = offset;\n\n          this.controlPanel.classList.remove('stopped');\n          this.controlPanel.classList.add('playing');\n          try {\n            // Force reload visualizers to prevent stuttering at playback start\n            for (const visualizer of this.visualizerListeners.keys()) {\n              if (visualizer.noteSequence != this.ns) {\n                visualizer.noteSequence = this.ns;\n                visualizer.reload();\n              }\n            }\n\n            const promise = this.player.start(this.ns, undefined, offset);\n            if (!looped) {\n              this.dispatchEvent(new CustomEvent('start'));\n            } else {\n              this.dispatchEvent(new CustomEvent('loop'));\n            }\n            await promise;\n            this.handleStop(true);\n          } catch (error) {\n            this.handleStop();\n            throw error;\n          }\n        } else if (this.player.getPlayState() == 'paused') {\n          // This normally should not happen, since we pause playback only when seeking.\n          this.player.resume();\n        }\n      }\n    })();\n  }\n\n  stop() {\n    if (this.player && this.player.isPlaying()) {\n      this.player.stop();\n    }\n    this.handleStop(false);\n  }\n\n  addVisualizer(visualizer: VisualizerElement) {\n    const listeners = {\n      start: () => { visualizer.noteSequence = this.noteSequence; },\n      stop: () => { visualizer.clearActiveNotes(); },\n      note: (event: NoteEvent) => { visualizer.redraw(event.detail.note); },\n    } as const;\n    for (const name of VISUALIZER_EVENTS) {\n      this.addEventListener(name, listeners[name]);\n    }\n    this.visualizerListeners.set(visualizer, listeners);\n  }\n\n  removeVisualizer(visualizer: VisualizerElement) {\n    const listeners = this.visualizerListeners.get(visualizer);\n    for (const name of VISUALIZER_EVENTS) {\n      this.removeEventListener(name, listeners[name]);\n    }\n    this.visualizerListeners.delete(visualizer);\n  }\n\n  protected noteCallback(note: NoteSequence.INote) {\n    if (!this.playing) {\n      return;\n    }\n    this.dispatchEvent(new CustomEvent('note', {detail: {note}}));\n    if (this.seeking) {\n      return;\n    }\n    this.seekBar.value = String(note.startTime);\n    this.currentTimeLabel.textContent = utils.formatTime(note.startTime);\n  }\n\n  protected handleStop(finished = false) {\n    if (finished) {\n      if (this.loop) {\n        this.currentTime = 0;\n        this._start(true);\n        return;\n      }\n      this.currentTime = this.duration;\n    }\n    this.controlPanel.classList.remove('playing');\n    this.controlPanel.classList.add('stopped');\n    if (this._playing) {\n      this._playing = false;\n      this.dispatchEvent(new CustomEvent('stop', {detail: {finished}}));\n    }\n  }\n\n  protected setVisualizerSelector(selector: string) {\n    // Remove old listeners\n    for (const listeners of this.visualizerListeners.values()) {\n      for (const name of VISUALIZER_EVENTS) {\n        this.removeEventListener(name, listeners[name]);\n      }\n    }\n    this.visualizerListeners.clear();\n\n    // Match visualizers and add them as listeners\n    if (selector != null) {\n      for (const element of document.querySelectorAll(selector)) {\n        if (!(element instanceof VisualizerElement)) {\n          console.warn(`Selector ${selector} matched non-visualizer element`, element);\n          continue;\n        }\n\n        this.addVisualizer(element);\n      }\n    }\n  }\n\n  protected setLoading() {\n    this.playButton.disabled = true;\n    this.seekBar.disabled = true;\n    this.controlPanel.classList.remove('error');\n    this.controlPanel.classList.add('loading', 'frozen');\n    this.controlPanel.removeAttribute('title');\n  }\n\n  protected setLoaded() {\n    this.controlPanel.classList.remove('loading', 'frozen');\n    this.playButton.disabled = false;\n    this.seekBar.disabled = false;\n  }\n\n  protected setError(error: string) {\n    this.playButton.disabled = true;\n    this.seekBar.disabled = true;\n    this.controlPanel.classList.remove('loading', 'stopped', 'playing');\n    this.controlPanel.classList.add('error', 'frozen');\n    this.controlPanel.title = error;\n  }\n\n  get noteSequence() {\n    return this.ns;\n  }\n\n  set noteSequence(value: INoteSequence | null) {\n    if (this.ns == value) {\n      return;\n    }\n    this.ns = value;\n    this.removeAttribute('src');  // Triggers initPlayer only if src was present.\n    this.initPlayer();\n  }\n\n  get src() {\n    return this.getAttribute('src');\n  }\n\n  set src(value: string | null) {\n    this.ns = null;\n    this.setOrRemoveAttribute('src', value);  // Triggers initPlayer only if src was present.\n    this.initPlayer();\n  }\n\n  /**\n   * @attr sound-font\n   */\n  get soundFont() {\n    return this.getAttribute('sound-font');\n  }\n\n  set soundFont(value: string | null) {\n    this.setOrRemoveAttribute('sound-font', value);\n  }\n\n  /**\n   * @attr loop\n   */\n  get loop() {\n    return this.getAttribute('loop') != null;\n  }\n\n  set loop(value: boolean) {\n    this.setOrRemoveAttribute('loop', value ? '' : null);\n  }\n\n  get currentTime() {\n    return parseFloat(this.seekBar.value);\n  }\n\n  set currentTime(value: number) {\n    this.seekBar.value = String(value);\n    this.currentTimeLabel.textContent = utils.formatTime(this.currentTime);\n    if (this.player && this.player.isPlaying()) {\n      this.player.seekTo(value);\n    }\n  }\n\n  get duration() {\n    return parseFloat(this.seekBar.max);\n  }\n\n  get playing() {\n    return this._playing;\n  }\n\n  protected setOrRemoveAttribute(name: string, value: string) {\n    if (value == null) {\n      this.removeAttribute(name);\n    } else {\n      this.setAttribute(name, value);\n    }\n  }\n}\n","import {PlayerElement, NoteEvent} from './player';\nimport {VisualizerElement} from './visualizer';\n\nexport {PlayerElement, VisualizerElement, NoteEvent};\n\nwindow.customElements.define('midi-player', PlayerElement);\nwindow.customElements.define('midi-visualizer', VisualizerElement);\n"],"names":["controlsTemplate","document","createElement","innerHTML","visualizerTemplate","formatTime","seconds","negative","s","Math","floor","abs","m","h","sStr","mStr","VISUALIZER_TYPES","VisualizerElement","HTMLElement","constructor","connectedCallback","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","this","domInitialized","wrapper","initVisualizerNow","attributeChangedCallback","name","_oldValue","_newValue","initVisualizer","initTimeout","window","setTimeout","_this","src","ns","mm","type","classList","add","svg","createElementNS","visualizers","_config","chunkSize","ceil","notes","length","lines","i","chunk","structuredClone","slice","startTime","forEach","n","endTime","div","new_ns","push","reload","redraw","activeNote","chunkIndex","indexOf","lastChunkIndex","note","visualizer","clearActiveNotes","value","removeAttribute","getAttribute","setOrRemoveAttribute","Error","join","Number","toString","setAttribute","VISUALIZER_EVENTS","playingPlayer","PlayerElement","Map","controlPanel","querySelector","playButton","currentTimeLabel","totalTimeLabel","seekBar","applyFocusVisiblePolyfill","addEventListener","player","isPlaying","stop","start","seeking","getPlayState","pause","time","currentTime","textContent","utils","seekTo","resume","initPlayerNow","newValue","hasAttribute","initPlayer","fn","setVisualizerSelector","readyState","initNs","needInitNs","setLoading","setError","max","String","totalTime","soundFont","callbackObject","run","noteCallback","undefined","loadSamples","setLoaded","dispatchEvent","CustomEvent","error","_start","looped","_this2","playing","_playing","offset","filter","remove","visualizerListeners","keys","noteSequence","promise","handleStop","addVisualizer","listeners","event","detail","set","removeVisualizer","get","removeEventListener","delete","finished","loop","duration","selector","values","clear","element","querySelectorAll","console","warn","disabled","title","parseFloat","customElements","define"],"mappings":"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"}